Index: .idea/other.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/other.xml	(revision 757f40c95ee97a2c9d7f0a13230cb5f064886a0e)
+++ .idea/other.xml	(revision 97f2f47b3efc31d87d0710e4b49523983458ee1e)
@@ -1,7 +1,6 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <project version="4">
   <component name="PySciProjectComponent">
-    <option name="PY_SCI_VIEW" value="true" />
     <option name="PY_SCI_VIEW_SUGGESTED" value="true" />
   </component>
 </project>
\ No newline at end of file
Index: TKINTER SUDOKU.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- TKINTER SUDOKU.py	(revision 757f40c95ee97a2c9d7f0a13230cb5f064886a0e)
+++ TKINTER SUDOKU.py	(revision 97f2f47b3efc31d87d0710e4b49523983458ee1e)
@@ -8,91 +8,77 @@
 import numpy as np
 from numpy import ndindex, ndenumerate
 from numpy import random
-from tkinter import*
+from tkinter import *
 from tkinter import ttk
 import time
 import random
 
-
-puzzle = [[8,0,0,0,0,0,0,0,0],
-          [0,0,3,6,0,0,0,0,0],
-          [0,7,0,0,9,0,2,0,0],
-          [0,5,0,0,0,7,0,0,0],
-          [0,0,0,0,4,5,7,0,0],
-          [0,0,0,1,0,0,0,3,0],
-          [0,0,1,0,0,0,0,6,8],
-          [0,0,8,5,0,0,0,1,0],
-          [0,9,0,0,0,0,4,0,0]]
+puzzle = [[8, 0, 0, 0, 0, 0, 0, 0, 0],
+          [0, 0, 3, 6, 0, 0, 0, 0, 0],
+          [0, 7, 0, 0, 9, 0, 2, 0, 0],
+          [0, 5, 0, 0, 0, 7, 0, 0, 0],
+          [0, 0, 0, 0, 4, 5, 7, 0, 0],
+          [0, 0, 0, 1, 0, 0, 0, 3, 0],
+          [0, 0, 1, 0, 0, 0, 0, 6, 8],
+          [0, 0, 8, 5, 0, 0, 0, 1, 0],
+          [0, 9, 0, 0, 0, 0, 4, 0, 0]]
 
-        
-    
-        
 puzzle = np.array(puzzle)
 
-root=Tk()
+root = Tk()
 root.configure(background='black')
- 
-# hey saluuuut
 
-var=[]
+var = []
+
 for i in puzzle:
     for x in i:
         if x == 0:
             x = ""
-        y=StringVar()
+        y = StringVar()
         y.set(x)
         var.append(y)
-        
-    
-var= np.array(var)
+
+var = np.array(var)
 
-
-
-
 count = 0
 for i in range(9):
-    for j in range(9):   
-        if puzzle[i,j] == 0:
-            Label(root, textvariable=var[count],width=4, height=2, font=("Arial", 16),foreground="black", background="#D9949F").grid(row=i, column=j, padx = 1, pady =1)
+    for j in range(9):
+        if puzzle[i, j] == 0:
+            Label(root, textvariable=var[count], width=4, height=2, font=("Arial", 16), foreground="black",
+                  background="#D9949F").grid(row=i, column=j, padx=1, pady=1)
         else:
-            Label(root, textvariable=var[count],width=4, height=2, font=("Arial", 16),foreground="black").grid(row=i, column=j, padx = 1, pady =1)
+            Label(root, textvariable=var[count], width=4, height=2, font=("Arial", 16), foreground="black").grid(row=i,
+                                                                                                                 column=j,
+                                                                                                                 padx=1,
+                                                                                                                 pady=1)
 
-        
         count += 1
-        
-        
-        
-        
-        
 
-var = var.reshape(9,9)
+var = var.reshape(9, 9)
 
-def SolveSudoku(puzzle):
-
-
-    z=[(index, x) for index, x in np.ndenumerate(puzzle)]
-    z = np.array(z)
-    inconnues = z[z[:,1]==0]  # indexes des cases qu'on peut modifier*$
-    
-    
-    
 
-    def bonchiffre(chiffre, row, column):  
-                                      
-        x = box(row, column)
-        if chiffre in puzzle[row] or chiffre in puzzle[:, column] or chiffre in puzzle[x[0]:x[1],x[2]:x[3]] :
-            return False
-        return True
-    
-    def box(row, column):                         
- 
-        uprow = [(row + i) for i in range(1,4) if (row + i) % 3 == 0 ][0]
-        downrow = uprow - 3
-        upcolumn = [(column + i) for i in range(1,4) if (column + i) % 3 == 0 ][0]
-        downcolumn = upcolumn - 3
-        return [downrow, uprow, downcolumn, upcolumn]      
+def bonchiffre(chiffre, row, column):
+    x = box(row, column)
+    if chiffre in puzzle[row] or chiffre in puzzle[:, column] or chiffre in puzzle[x[0]:x[1], x[2]:x[3]]:
+        return False
+    return True
+
+
+def box(row, column):
+    uprow = [(row + i) for i in range(1, 4) if (row + i) % 3 == 0][0]
+    downrow = uprow - 3
+    upcolumn = [(column + i) for i in range(1, 4) if (column + i) % 3 == 0][0]
+    downcolumn = upcolumn - 3
+    return [downrow, uprow, downcolumn, upcolumn]
 
-    i=0   
+
+z = [(index, x) for index, x in np.ndenumerate(puzzle)]
+z = np.array(z)
+inconnues = z[z[:, 1] == 0]  # indexes des cases qu'on peut modifier*$
+
+
+def SolveSudoku(puzzle):
+    i = 0
     counter = 0
     
     while i <= len(inconnues):        
@@ -100,24 +86,18 @@
         if i == (len(inconnues)):  
             print(counter)
             return puzzle
-            break
-        
             
-        for j in range((puzzle[inconnues[i][0][0],inconnues[i][0][1]]),10):
-            
-            if bonchiffre(j, inconnues[i][0][0], inconnues[i][0][1]) == True  :
+        for j in range((puzzle[inconnues[i][0][0], inconnues[i][0][1]]),10):
+            if bonchiffre(j, inconnues[i][0][0], inconnues[i][0][1]):
                 puzzle[inconnues[i][0][0], inconnues[i][0][1]] = j 
                 var[inconnues[i][0][0], inconnues[i][0][1]].set(j)
                 root.update()
                 # time.sleep(.02)
-
-
-                counter += 1                
+                counter += 1
                 i += 1                
                 break
-          
 
-            if bonchiffre(j, inconnues[i][0][0], inconnues[i][0][1]) == False and j==9 :
+            if not bonchiffre(j, inconnues[i][0][0], inconnues[i][0][1]) and j == 9:
                 puzzle[inconnues[i][0][0], inconnues[i][0][1]] = 0   
                 var[inconnues[i][0][0], inconnues[i][0][1]].set("")
                 
@@ -131,5 +111,3 @@
 SolveSudoku(puzzle)
 root.update()
 root.mainloop()
-
-
